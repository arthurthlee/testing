name: SWE-Agent Fix


on:
  issues:
    types: [labeled]


jobs:
  check-labels:
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.check.outputs.result }}
    steps:
      - name: Check if issue has label and should run
        id: check
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          script: |
            console.log(`Action: ${context.payload.action}`);
            console.log(`Label added: ${context.payload.label?.name || 'none'}`);

            // Only proceed if the swe-agent label was just added
            if (context.payload.action === 'labeled') {
              const addedLabel = context.payload.label;
              if (!addedLabel || addedLabel.name !== 'swe-agent') {
                console.log(`❌ swe-agent label was not added. Added: ${addedLabel?.name || 'unknown'}`);
                return false;
              }
              console.log('✅ swe-agent label was just added');
            }

            // Check if we've already created a PR for this issue
            const { data: allPulls } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'all'
            });

            const existingPR = allPulls.find(pr =>
              pr.head.ref.startsWith(`swe-agent-fix-issue-${context.payload.issue.number}`)
            );

            if (existingPR) {
              console.log(`❌ PR already exists: ${existingPR.html_url}`);

              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.issue.number,
                body: `🤖 **SWE-Agent has already processed this issue**

                An existing pull request was found: ${existingPR.html_url}

                If you need to re-run SWE-Agent, please close the existing PR first.`
              });

              return false;
            }

            console.log('✅ Should run SWE-Agent for this issue');
            return true;
  swe-agent-fix:
    needs: check-labels
    if: needs.check-labels.outputs.should_run == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN }}
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install SWE-agent
        run: |
          git clone https://github.com/SWE-agent/SWE-agent.git
          cd SWE-agent
          python -m pip install --upgrade pip
          pip install --editable .

      - name: Set up API keys
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |

          # Set as environment variables for this session
          echo "OPENAI_API_KEY=$OPENAI_API_KEY" >> $GITHUB_ENV
          echo "ANTHROPIC_API_KEY=$ANTHROPIC_API_KEY" >> $GITHUB_ENV

      - name: Extract issue information
        id: issue_info
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.payload.issue;
            const issueNumber = issue.number;
            const issueTitle = issue.title;
            const issueBody = issue.body || '';
            const repoUrl = context.payload.repository.clone_url;

            core.setOutput('issue_number', issueNumber);
            core.setOutput('issue_title', issueTitle);
            core.setOutput('issue_body', issueBody);
            core.setOutput('repo_url', repoUrl);

      - name: Create branch for fix
        run: |
          BRANCH_NAME="swe-agent-fix-issue-${{ steps.issue_info.outputs.issue_number }}"

          # Delete branch if it exists locally
          git branch -D $BRANCH_NAME 2>/dev/null || true

          # Delete branch if it exists remotely (ignore errors)
          git push origin --delete $BRANCH_NAME 2>/dev/null || true

          # Create and checkout new branch
          git checkout -b $BRANCH_NAME
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Create problem statement file
        run: |
          cat > problem_statement.txt << 'EOF'
          ${{ steps.issue_info.outputs.issue_title }}

          ${{ steps.issue_info.outputs.issue_body }}
          EOF

      - name: Run SWE-agent
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
          ISSUE_NUMBER: ${{ steps.issue_info.outputs.issue_number }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          MOCK_MODE: ${{ vars.MOCK_SWE_AGENT || 'false' }}
        run: |
          if [ "$MOCK_MODE" = "true" ]; then
            echo "🧪 MOCK MODE: Simulating SWE-agent execution"

            # Create a mock change to test the workflow
            echo "# Mock fix generated by SWE-agent" >> README.md
            echo "This is a test change to verify the GitHub Actions workflow works properly." >> README.md
            echo "" >> README.md
            echo "Issue #${{ steps.issue_info.outputs.issue_number }}: ${{ steps.issue_info.outputs.issue_title }}" >> README.md
            echo "Generated at: $(date)" >> README.md

            echo "✅ Mock SWE-agent completed successfully"
          else
            echo "🤖 Running real SWE-agent"
            cd SWE-agent
            sweagent run \
              --agent.model.name=claude-sonnet-4-20250514 \
              --agent.model.per_instance_cost_limit=3.00 \
              --env.repo.path=.. \
              --problem_statement.path=../problem_statement.txt
          fi

      - name: Find and apply patches
        run: |
          # Find the most recent patch file
          PATCH_FILE=$(find . -name "*.patch" -type f -printf '%T@ %p\n' | sort -n | tail -1 | cut -d' ' -f2-)

          if [ -n "$PATCH_FILE" ] && [ -f "$PATCH_FILE" ]; then
            echo "Found patch file: $PATCH_FILE"
            echo "Patch contents:"
            cat "$PATCH_FILE"

            # Apply the patch to the repository
            echo "Applying patch..."
            git apply "$PATCH_FILE" || {
              echo "Failed to apply patch with git apply, trying with patch command..."
              patch -p1 < "$PATCH_FILE" || {
                echo "Failed to apply patch with patch command as well"
                exit 1
              }
            }

            echo "Patch applied successfully"
          else
            echo "No patch file found"
            exit 1
          fi

      - name: Configure git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Remove excluded files from git tracking (if they exist)
        run: |
          # Remove files from git index but keep them in working directory
          git rm --cached .env 2>/dev/null || true
          git rm --cached -r SWE-agent/ 2>/dev/null || true
          git rm --cached problem_statement.txt 2>/dev/null || true
          git rm --cached FIX_SUMMARY.md 2>/dev/null || true

          # Add them to .gitignore if not already there
          echo -e "\n# Excluded files\n.env\nSWE-agent/\nproblem_statement.txt/\nFIX_SUMMARY.md" >> .gitignore

          # Remove duplicates from .gitignore
          sort .gitignore | uniq > .gitignore.tmp && mv .gitignore.tmp .gitignore

      - name: Stage changes (excluding specified files)
        run: |
          # Add all changes except the excluded files
          git add .

          # Remove the excluded files from staging area if they were added
          git reset HEAD .env 2>/dev/null || true
          git reset HEAD SWE-agent/ 2>/dev/null || true
          git reset HEAD problem_statement.txt 2>/dev/null || true
          git reset HEAD FIX_SUMMARY.md 2>/dev/null || true

          # Show what will be committed
          echo "Files to be committed:"
          git diff --cached --name-only

      - name: Check if there are changes to commit
        id: check_changes
        run: |
          if git diff --cached --quiet; then
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "No changes to commit"
          else
            echo "changes=true" >> $GITHUB_OUTPUT
            echo "Changes detected"
          fi

      - name: Read FIX_SUMMARY.md
        id: fix_summary
        run: |
          if [ -f "FIX_SUMMARY.md" ]; then
            echo "Fix summary file found, reading content..."
            # Read the file content and set it as output
            # Using heredoc to handle multiline content properly
            echo 'summary<<EOF' >> $GITHUB_OUTPUT
            cat FIX_SUMMARY.md >> $GITHUB_OUTPUT
            echo 'EOF' >> $GITHUB_OUTPUT
          else
            echo "FIX_SUMMARY.md not found, using default message"
            echo "summary=SWE-Agent analyzed the codebase and generated fixes based on the issue description." >> $GITHUB_OUTPUT
          fi

      - name: Commit changes
        if: steps.check_changes.outputs.changes == 'true'
        run: |
          git commit -m "Apply SWE-agent generated changes

          - Applied patch from SWE-agent
          - Automated commit from GitHub Actions
          - Excludes: .env, SWE-agent/, problem_statement.txt

          Co-authored-by: SWE-Agent <swe-agent@github-actions>"

      - name: Push changes
        if: steps.check_changes.outputs.changes == 'true'
        run: |
          echo "Pushing branch: ${{ env.BRANCH_NAME }}"
          git push -u origin ${{ env.BRANCH_NAME }}

      - name: Create Pull Request
        if: steps.check_changes.outputs.changes == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          script: |
            const { data: pullRequest } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🤖 SWE-Agent: Fix for issue #${{ steps.issue_info.outputs.issue_number }}`,
              head: '${{ env.BRANCH_NAME }}',
              base: 'main', // Change to your default branch if different
              body: `## 🤖 Automated Fix by SWE-Agent

            This pull request contains automated fixes generated by SWE-Agent for the following issue:

            **Issue:** #${{ steps.issue_info.outputs.issue_number }} - ${{ steps.issue_info.outputs.issue_title }}

            ### Changes Made
            SWE-Agent analyzed the codebase and generated fixes based on the issue description.

            ${{ steps.fix_summary.outputs.summary }}

            ### Review Notes
            - This is an automated fix generated by AI
            - Please review all changes carefully before merging
            - Run tests to ensure the fix doesn't introduce regressions
            - Consider the fix as a starting point that may need refinement

            **Closes #${{ steps.issue_info.outputs.issue_number }}**

            ---
            *Generated by [SWE-Agent](https://github.com/princeton-nlp/SWE-agent)*`
              });

              // Add labels to the PR
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pullRequest.number,
                labels: ['swe-agent', 'automated-fix']
              });

              console.log(`Created PR #${pullRequest.number}: ${pullRequest.html_url}`);

      - name: Comment on issue
        if: steps.check_changes.outputs.changes == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ steps.issue_info.outputs.issue_number }},
              body: `🤖 **SWE-Agent has analyzed this issue and created a potential fix!**

              A pull request with automated fixes has been created. Please review the changes and test thoroughly before merging.

              The fixes are available in the pull request linked above. If the fix doesn't fully resolve the issue, please provide additional context and I can try again.`
            });

      - name: Handle no changes case
        if: steps.check_changes.outputs.changes == 'false'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ steps.issue_info.outputs.issue_number }},
              body: `🤖 **SWE-Agent Analysis Complete**

              SWE-Agent has analyzed this issue but was unable to generate any code changes. This could mean:

              - The issue requires human intervention or judgment
              - The problem description needs more specificity
              - The fix requires architectural changes beyond SWE-Agent's current scope
              - The issue may already be resolved

              Please review the issue details and consider providing more specific reproduction steps or context.`
            });

      - name: Clean up on failure
        if: failure()
        run: |
          git checkout main 2>/dev/null || git checkout master 2>/dev/null || true
          git branch -D ${{ env.BRANCH_NAME }} 2>/dev/null || true